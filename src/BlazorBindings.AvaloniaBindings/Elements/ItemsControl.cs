// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using Microsoft.AspNetCore.Components.Rendering;
using System.Collections.Immutable;
using System.Collections.Specialized;
using System.Reflection.Metadata.Ecma335;

#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements
{
    /// <summary>
    /// Displays a collection of items.
    /// </summary>
    public partial class ItemsControl<T> : BlazorBindings.AvaloniaBindings.Elements.Primitives.TemplatedControl
    {
        [Parameter] public IEnumerable<T> ItemsSource { get; set; }
        [Parameter] public Func<T, object> ItemKeySelector { get; set; }

        /// <summary>
        /// Gets or sets the data template used to display the items in the control.
        /// </summary>
        [Parameter] public RenderFragment<T> ItemTemplate { get; set; }

        private bool AssignItemsSourceDirectly => ItemsSource is INotifyCollectionChanged || ItemsSource is IImmutableList<T>;

        protected override bool HandleAdditionalParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(ItemsSource):
                    if (!Equals(ItemsSource, value))
                    {
                        ItemsSource = (IEnumerable<T>)value;

                        if (AssignItemsSourceDirectly)
                            NativeControl.ItemsSource = ItemsSource;
                    }
                    return true;
                case nameof(ItemTemplate):
                    ItemTemplate = (RenderFragment<T>)value;
                    return true;

                case nameof(ItemKeySelector):
                    ItemKeySelector = (Func<T, object>)value;
                    return true;

                default:
                    return base.HandleAdditionalParameter(name, value);
            }
        }


        protected override void RenderAdditionalPartialElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalPartialElementContent(builder, ref sequence);

            RenderTreeBuilderHelper.AddDataTemplateProperty<AC.ItemsControl, T>(builder, sequence++, ItemTemplate,
                (nativeElement, nativeDataTemplate) => nativeElement.ItemTemplate = nativeDataTemplate);

            sequence++;
            if (!AssignItemsSourceDirectly)
            {
                RenderTreeBuilderHelper.AddItemsSourceProperty<AC.ItemsControl, T>(builder, sequence, ItemsSource, ItemKeySelector, 
                    (nativeElement, items) => nativeElement.ItemsSource = items);
            }
        }
    }
}
