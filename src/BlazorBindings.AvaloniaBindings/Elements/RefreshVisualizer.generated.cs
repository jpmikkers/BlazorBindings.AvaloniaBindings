// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>



#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements
{
    public partial class RefreshVisualizer : ContentControl
    {
        static RefreshVisualizer()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value that indicates the orientation of the visualizer.
        /// </summary>
        [Parameter] public AC.RefreshVisualizerOrientation? Orientation { get; set; }
        [Parameter] public EventCallback<AC.RefreshRequestedEventArgs> OnRefreshRequested { get; set; }

        public new AC.RefreshVisualizer NativeControl => (AC.RefreshVisualizer)((AvaloniaObject)this).NativeControl;

        protected override AC.RefreshVisualizer CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Orientation):
                    if (!Equals(Orientation, value))
                    {
                        Orientation = (AC.RefreshVisualizerOrientation?)value;
                        NativeControl.Orientation = Orientation ?? (AC.RefreshVisualizerOrientation)AC.RefreshVisualizer.OrientationProperty.GetDefaultValue(AC.RefreshVisualizer.OrientationProperty.OwnerType);
                    }
                    break;
                case nameof(OnRefreshRequested):
                    if (!Equals(OnRefreshRequested, value))
                    {
                        void NativeControlRefreshRequested(object sender, AC.RefreshRequestedEventArgs e) => InvokeEventCallback(OnRefreshRequested, e);

                        OnRefreshRequested = (EventCallback<AC.RefreshRequestedEventArgs>)value;
                        NativeControl.RefreshRequested -= NativeControlRefreshRequested;
                        NativeControl.RefreshRequested += NativeControlRefreshRequested;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
