// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>



#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements
{
    /// <summary>
    /// Represents a container control that provides a <see cref="T:Avalonia.Controls.RefreshVisualizer" /> and pull-to-refresh functionality for scrollable content.
    /// </summary>
    public partial class RefreshContainer : ContentControl
    {
        static RefreshContainer()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value that specifies the direction to pull to initiate a refresh.
        /// </summary>
        [Parameter] public global::Avalonia.Input.PullDirection? PullDirection { get; set; }
        /// <summary>
        /// Gets or sets the <see cref="T:Avalonia.Controls.RefreshVisualizer" /> for this container.
        /// </summary>
        [Parameter] public AC.RefreshVisualizer Visualizer { get; set; }
        [Parameter] public EventCallback<AC.RefreshRequestedEventArgs> OnRefreshRequested { get; set; }

        public new AC.RefreshContainer NativeControl => (AC.RefreshContainer)((AvaloniaObject)this).NativeControl;

        protected override AC.RefreshContainer CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(PullDirection):
                    if (!Equals(PullDirection, value))
                    {
                        PullDirection = (global::Avalonia.Input.PullDirection?)value;
                        NativeControl.PullDirection = PullDirection ?? (global::Avalonia.Input.PullDirection)AC.RefreshContainer.PullDirectionProperty.GetDefaultValue(AC.RefreshContainer.PullDirectionProperty.OwnerType);
                    }
                    break;
                case nameof(Visualizer):
                    if (!Equals(Visualizer, value))
                    {
                        Visualizer = (AC.RefreshVisualizer)value;
                        NativeControl.Visualizer = Visualizer;
                    }
                    break;
                case nameof(OnRefreshRequested):
                    if (!Equals(OnRefreshRequested, value))
                    {
                        void NativeControlRefreshRequested(object sender, AC.RefreshRequestedEventArgs e) => InvokeEventCallback(OnRefreshRequested, e);

                        OnRefreshRequested = (EventCallback<AC.RefreshRequestedEventArgs>)value;
                        NativeControl.RefreshRequested -= NativeControlRefreshRequested;
                        NativeControl.RefreshRequested += NativeControlRefreshRequested;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
