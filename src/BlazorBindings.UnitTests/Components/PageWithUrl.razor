@implements IDisposable
@page "/test/path/{Title}"
@page "/test/path/{Title}/subpath"
@page "/test/int-route/{I:int}/subpath"
@page "/test/nullable-long-route/{L:long?}"
@page "/test/datetime/{Dt}/without-constraint"

<ContentControl @ref="_page" Tag="@(Title)">
    <StackPanel>
        <Label ChildContent="@(b => b.AddContent(0, I.ToString()))" />
        <Label ChildContent="@(b => b.AddContent(0, L?.ToString()))" />
        <Label ChildContent="@(b => b.AddContent(0, Dt?.ToString()))" />

        <Label ChildContent="@(b => b.AddContent(0, string.Concat(AdditionalText)))" />

        <NonPageContent />
    </StackPanel>
</ContentControl>

@code
{
    ContentControl _page;

    [Parameter] public string Title { get; set; }
    [Parameter] public int I { get; set; }
    [Parameter] public long? L { get; set; }
    [Parameter] public DateTime? Dt { get; set; }
    [Parameter] public string[] AdditionalText { get; set; } = Array.Empty<string>();

    public event Action OnDispose;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // This is needed to be able to get component from tests.
            _page.NativeControl.SetValue(TestProperties.ComponentProperty, this);
        }
    }

    public void Dispose()
    {
        OnDispose?.Invoke();
        OnDispose = null;
    }

    public static void ValidateContent(Avalonia.Visual content, int i = 0, long? l = null, DateTime? dt = null, string[] additionalLines = null)
    {
        var contentControl = content as Avalonia.Controls.ContentControl;
        Assert.That(contentControl, Is.Not.Null);

        var layout = (Avalonia.Controls.StackPanel)contentControl.Content;
        var labelI = (Avalonia.Controls.Label)layout.Children[0];
        var labelL = (Avalonia.Controls.Label)layout.Children[1];
        var labelDt = (Avalonia.Controls.Label)layout.Children[2];
        var labelAdditional = (Avalonia.Controls.Label)layout.Children[3];

        Assert.That(labelI.Content, Is.EqualTo(i.ToString()));
        Assert.That(labelL.Content, Is.EqualTo(l?.ToString() ?? ""));
        Assert.That(labelDt.Content, Is.EqualTo(dt?.ToString() ?? ""));

        if (additionalLines != null)
            Assert.That(labelAdditional.Content, Is.EqualTo(string.Concat(additionalLines)));

        var nonPageContent = layout.Children[4];
        NonPageContent.ValidateContent(nonPageContent);
    }
}