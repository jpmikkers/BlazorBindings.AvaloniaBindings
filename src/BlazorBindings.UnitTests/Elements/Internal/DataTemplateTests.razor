@inherits ElementTestBase

@code
{
    [AvaloniaTest]
    public async Task CreateContentFromDataTemplate()
    {
        var template = await RenderTemplate<int>(i =>
            @<Label>@i - @(i == 1 ? "one" : "many")</Label>);

        var label1 = CreateContent<AC.Label>(template, 1);
        var label2 = CreateContent<AC.Label>(template, 2);

        Assert.That(label1.Content, Is.EqualTo("1 - one"));
        Assert.That(label2.Content, Is.EqualTo("2 - many"));
    }

    [AvaloniaTest]
    public async Task TemplateContentChangesBasedOnBindingContext()
    {
        var template = await RenderTemplate<int>(i =>
            @<Label>@i - @(i == 1 ? "one" : "many")</Label>);

        var templateRoot = CreateTemplateRoot(template, 1);
        var label = templateRoot.GetTemplateContent<AC.Label>();

        Assert.That(label.Content, Is.EqualTo("1 - one"));

        templateRoot.DataContext = 2;
        StateHasChanged();

        Assert.That(label.Content, Is.EqualTo("2 - many"));
    }

    private async Task<AC.Templates.IDataTemplate> RenderTemplate<T>(RenderFragment<T> templateFragment)
    {
        var collectionView = await Render<AC.DataGrid>(@<DataGrid T="T" RowDetailsTemplate="templateFragment" />);
        return (AC.Templates.IDataTemplate)collectionView.RowDetailsTemplate;
    }

    private AC.ContentControl CreateTemplateRoot(AC.Templates.IDataTemplate template, object item)
    {
        var content = (AC.ContentControl)template.Build(item);
        content.DataContext = item;
        return content;
    }

    private T CreateContent<T>(AC.Templates.IDataTemplate templateSelector, object value)
        where T : Avalonia.StyledElement
    {
        var templateRoot = CreateTemplateRoot(templateSelector, value);
        return (T)templateRoot.Content;
    }
}
