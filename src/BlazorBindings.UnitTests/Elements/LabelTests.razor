@inherits ElementTestBase

@code
{
    [AvaloniaTest]
    public async Task AddLabelWithChildContentProperty()
    {
        AC.Label l;
        var someText = "123";
        var label = await Render<AC.Label>(@<Label ChildContent="b => b.AddContent(0, someText)" />);

        Assert.That(label.Content, Is.EqualTo("123"));
    }

    [AvaloniaTest]
    public async Task AddLabelWithTextContent()
    {
        var label = await Render<AC.Label>(@<Label>345</Label>);

        Assert.That(label.Content, Is.EqualTo("345"));
    }

    [AvaloniaTest]
    public async Task AddLabelWithDynamicTextContent()
    {
        var someText = "123";
        var label = await Render<AC.Label>(@<Label>Dynamic - @someText - label with child content</Label>);

        Assert.That(label.Content, Is.EqualTo("Dynamic - 123 - label with child content"));

        someText = "234";
        StateHasChanged();

        Assert.That(label.Content, Is.EqualTo("Dynamic - 234 - label with child content"));
    }

    // [AvaloniaTest]
    // public async Task AddLabelWithSpans()
    // {
    //     var label = await Render<AC.Label>(
    // @<Label>
    //     <Run Text="Label with spans " />
    //     <Run TextColor="Colors.Red" Text="with color, " />
    //     <Run TextDecorations="TextDecorations.Strikethrough">text decorations</Run>
    //     <Run FontAttributes="MC.FontAttributes.Bold" Text=" and font attributes." />
    // </Label>
    //     );

    //     var spans = label.FormattedText.Spans;
    //     Assert.That(spans[0].Content, Is.EqualTo("Label with spans "));

    //     Assert.That(spans[1].Content, Is.EqualTo("with color, "));
    //     Assert.That(spans[1].ContentColor, Is.EqualTo(Colors.Red));

    //     Assert.That(spans[2].Content, Is.EqualTo("text decorations"));
    //     Assert.That(spans[2].ContentDecorations, Is.EqualTo(TextDecorations.Strikethrough));

    //     Assert.That(spans[3].Content, Is.EqualTo(" and font attributes."));
    //     Assert.That(spans[3].FontAttributes, Is.EqualTo(MC.FontAttributes.Bold));
    // }

    // [AvaloniaTest]
    // public async Task AddSpanDynamically()
    // {
    //     var insertSpan = false;

    //     var label = await Render<AC.Label>(
    // @<Label>
    //     <Span>1</Span>
    //     <Span>2</Span>
    //     @if (insertSpan)
    //     {
    //         <Span>10</Span>
    //     }
    //     <Span>3</Span>
    // </Label>
    // );

    //     Assert.That(label.FormattedText.ToString(), Is.EqualTo("123"));

    //     insertSpan = true;
    //     StateHasChanged();

    //     Assert.That(label.FormattedText.ToString(), Is.EqualTo("12103"));
    // }
}
