@using System.Reflection;
@using Avalonia.Input
@using Avalonia.Interactivity
@inherits ElementTestBase

@code
{
    [AvaloniaTest]
    public async Task OnTapInvokesCallback()
    {
        bool tapped = false;
        var view = await Render<AC.ContentControl>(@<ContentControl OnTapped="() => tapped = true" />);

        SingleTap(view);

        Assert.That(tapped, Is.True);
    }

    [AvaloniaTest]
    public async Task OnDoubleTapInvokesCallback()
    {
        bool tapped = false;
        var view = await Render<AC.ContentControl>(@<ContentControl OnDoubleTapped="() => tapped = true" />);

        DoubleTap(view);

        Assert.That(tapped, Is.True);
    }

    // [AvaloniaTest]
    // public async Task OnSwipeInvokesCallback()
    // {
    //     SwipeDirection? swipeDirection = null;
    //     var view = await Render<AC.ContentControl>(@<ContentControl swip OnSwipe="arg => swipeDirection = arg.Direction" />);

    //     Swipe(view, SwipeDirection.Left);
    //     Assert.That(swipeDirection, Is.EqualTo(SwipeDirection.Left));

    //     Swipe(view, SwipeDirection.Right);
    //     Assert.That(swipeDirection, Is.EqualTo(SwipeDirection.Right));

    //     Swipe(view, SwipeDirection.Up);
    //     Assert.That(swipeDirection, Is.EqualTo(SwipeDirection.Up));

    //     Swipe(view, SwipeDirection.Down);
    //     Assert.That(swipeDirection, Is.EqualTo(SwipeDirection.Down));
    // }

    // [AvaloniaTest]
    // public async Task OnPinchUpdateInvokesCallback()
    // {
    //     GestureStatus? status = null;
    //     var view = await Render<AC.ContentControl>(@<ContentControl OnPinchUpdate="arg => status = arg.Status" />);

    //     SendPinch(view);
    //     Assert.That(status, Is.EqualTo(GestureStatus.Running));

    //     SendPinchEnded(view);
    //     Assert.That(status, Is.EqualTo(GestureStatus.Completed));
    // }

    // [AvaloniaTest]
    // public async Task OnPanUpdateInvokesCallback()
    // {
    //     (double, double) totalXY = (0, 0);
    //     var view = await Render<AC.ContentControl>(@<ContentControl OnPanUpdate="arg => totalXY = (arg.TotalX, arg.TotalY)" />);

    //     SendPan(view, 42, -24);
    //     Assert.That(totalXY, Is.EqualTo((42, -24)));
    // }

    private void SingleTap(AC.ContentControl view)
    {
        var e = new PointerEventArgs(null, null, null, null, default, 0, default, default);
        view.RaiseEvent(new TappedEventArgs(Gestures.TappedEvent, e));
    }

    private void DoubleTap(AC.ContentControl view)
    {
        var e = new PointerEventArgs(null, null, null, null, default, 0, default, default);
        view.RaiseEvent(new TappedEventArgs(Gestures.DoubleTappedEvent, e));
    }

    // private void Swipe(AC.ContentControl view, SwipeDirection direction)
    // {
    //     var gestureRecognizer = view.GestureRecognizers.OfType<MC.SwipeGestureRecognizer>().First();
    //     gestureRecognizer.SendSwiped(view, direction);
    // }

    // private void SendPinch(AC.ContentControl view)
    // {
    //     var gestureRecognizer = (MC.IPinchGestureController)view.GestureRecognizers.OfType<MC.PinchGestureRecognizer>().First();
    //     gestureRecognizer.SendPinch(view, 2, Point.Zero);
    // }

    // private void SendPinchEnded(AC.ContentControl view)
    // {
    //     var gestureRecognizer = (MC.IPinchGestureController)view.GestureRecognizers.OfType<MC.PinchGestureRecognizer>().First();
    //     gestureRecognizer.SendPinchEnded(view);
    // }

    // private void SendPan(AC.ContentControl view, double totalX, double totalY)
    // {
    //     var gestureRecognizer = (MC.IPanGestureController)view.GestureRecognizers.OfType<MC.PanGestureRecognizer>().First();
    //     gestureRecognizer.SendPan(view, totalX, totalY, 123);
    // }
}
