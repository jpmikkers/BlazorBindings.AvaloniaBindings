@using Avalonia.Controls
@inherits ElementTestBase

@code
{
    [AvaloniaTest]
    public async Task AddItemsViaGrid_Attachment()
    {
        var grid = await Render<AC.Grid>(
            @<Grid>
                <Label>
                    0-0 <Grid_Attachment Row="0" Column="0" />
                </Label>

                <Label>0-1 <Grid_Attachment Row="0" Column="1" ColumnSpan="2" /></Label>

                <Label>1-0 <Grid_Attachment Row="1" Column="0" RowSpan="2" /></Label>

                <Label>1-1 <Grid_Attachment Row="1" Column="1" /></Label>

            </Grid>);

        var label00 = (AC.Label)grid.Children[0];
        var label01 = (AC.Label)grid.Children[1];
        var label10 = (AC.Label)grid.Children[2];
        var label11 = (AC.Label)grid.Children[3];

        Assert.That(label00.Content, Is.EqualTo("0-0"));
        Assert.That(GetGridProps(label00), Is.EqualTo((0, 0, 1, 1)));

        Assert.That(label01.Content, Is.EqualTo("0-1"));
        Assert.That(GetGridProps(label01), Is.EqualTo((0, 1, 1, 2)));

        Assert.That(label10.Content, Is.EqualTo("1-0"));
        Assert.That(GetGridProps(label10), Is.EqualTo((1, 0, 2, 1)));

        Assert.That(label11.Content, Is.EqualTo("1-1"));
        Assert.That(GetGridProps(label11), Is.EqualTo((1, 1, 1, 1)));
    }

    [AvaloniaTest]
    public async Task AddItemsViaAttachedProperties()
    {
        var grid = await Render<AC.Grid>(
            @<Grid>
                <Label Grid.Row="0" Grid.Column="0">0-0</Label>
                <Label Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="2">0-1</Label>
                <Label Grid.Row="1" Grid.Column="0" Grid.RowSpan="2">1-0</Label>
                <Label Grid.Row="1" Grid.Column="1">1-1</Label>
            </Grid>);

        var label00 = (AC.Label)grid.Children[0];
        var label01 = (AC.Label)grid.Children[1];
        var label10 = (AC.Label)grid.Children[2];
        var label11 = (AC.Label)grid.Children[3];

        Assert.That(label00.Content, Is.EqualTo("0-0"));
        Assert.That(GetGridProps(label00), Is.EqualTo((0, 0, 1, 1)));

        Assert.That(label01.Content, Is.EqualTo("0-1"));
        Assert.That(GetGridProps(label01), Is.EqualTo((0, 1, 1, 2)));

        Assert.That(label10.Content, Is.EqualTo("1-0"));
        Assert.That(GetGridProps(label10), Is.EqualTo((1, 0, 2, 1)));

        Assert.That(label11.Content, Is.EqualTo("1-1"));
        Assert.That(GetGridProps(label11), Is.EqualTo((1, 1, 1, 1)));
    }

    [AvaloniaTest]
    public async Task SetColumnDefinitions()
    {
        var grid = await Render<AC.Grid>(@<Grid ColumnDefinitions="@(new ColumnDefinitions("10, Auto, 20, *"))" /> );

        Assert.That(grid.ColumnDefinitions[0].Width.Value, Is.EqualTo(10));
        Assert.That(grid.ColumnDefinitions[1].Width.GridUnitType, Is.EqualTo(GridUnitType.Auto));
        Assert.That(grid.ColumnDefinitions[2].Width.Value, Is.EqualTo(20));
        Assert.That(grid.ColumnDefinitions[3].Width.GridUnitType, Is.EqualTo(GridUnitType.Star));
    }

    [AvaloniaTest]
    public async Task SetRowDefinitions()
    {
        var grid = await Render<AC.Grid>(@<Grid RowDefinitions="@(new RowDefinitions("10, Auto, 20, *"))" />);

        Assert.That(grid.RowDefinitions[0].Height.Value, Is.EqualTo(10));
        Assert.That(grid.RowDefinitions[1].Height.GridUnitType, Is.EqualTo(GridUnitType.Auto));
        Assert.That(grid.RowDefinitions[2].Height.Value, Is.EqualTo(20));
        Assert.That(grid.RowDefinitions[3].Height.GridUnitType, Is.EqualTo(GridUnitType.Star));
    }


    [AvaloniaTest]
    public async Task AddAndRemoveGridCells()
    {
        var insertItems = true;

        var grid = await Render<AC.Grid>(
            @<Grid>
                @if (insertItems)
                {
                    <Label Grid.Row="0" Grid.Column="0">0-0a</Label>
                }
                <Label Grid.Row="0" Grid.Column="0">0-0b</Label>

                <Label Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="2">0-1a</Label>

                @if (insertItems)
                {
                    <Label Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="2">0-1b</Label>
                }

                <Label Grid.Row="1" Grid.Column="0" Grid.RowSpan="2">1-0a</Label>
                <Label Grid.Row="1" Grid.Column="0" Grid.RowSpan="2">1-0b</Label>

                @if (insertItems)
                {
                    <Label Grid.Row="1" Grid.Column="1">1-1a</Label>
                    <Label Grid.Row="1" Grid.Column="1">1-1b</Label>
                }
            </Grid>);

        var labels = grid.Children.Cast<AC.Label>().ToArray();
        var label00a = labels[0];
        var label00b = labels[1];
        var label01a = labels[2];
        var label01b = labels[3];
        var label10a = labels[4];
        var label10b = labels[5];
        var label11a = labels[6];
        var label11b = labels[7];

        Assert.That(label00a.Content, Is.EqualTo("0-0a"));
        Assert.That(GetGridProps(label00a), Is.EqualTo((0, 0, 1, 1)));

        Assert.That(label00b.Content, Is.EqualTo("0-0b"));
        Assert.That(GetGridProps(label00b), Is.EqualTo((0, 0, 1, 1)));

        Assert.That(label01a.Content, Is.EqualTo("0-1a"));
        Assert.That(GetGridProps(label01a), Is.EqualTo((0, 1, 1, 2)));

        Assert.That(label01b.Content, Is.EqualTo("0-1b"));
        Assert.That(GetGridProps(label01b), Is.EqualTo((0, 1, 1, 2)));

        Assert.That(label10a.Content, Is.EqualTo("1-0a"));
        Assert.That(GetGridProps(label10a), Is.EqualTo((1, 0, 2, 1)));

        Assert.That(label10b.Content, Is.EqualTo("1-0b"));
        Assert.That(GetGridProps(label10b), Is.EqualTo((1, 0, 2, 1)));

        Assert.That(label11a.Content, Is.EqualTo("1-1a"));
        Assert.That(GetGridProps(label11a), Is.EqualTo((1, 1, 1, 1)));

        Assert.That(label11b.Content, Is.EqualTo("1-1b"));
        Assert.That(GetGridProps(label11b), Is.EqualTo((1, 1, 1, 1)));

        insertItems = false;
        StateHasChanged();

        labels = grid.Children.Cast<AC.Label>().ToArray();
        label00b = labels[0];
        label01a = labels[1];
        label10a = labels[2];
        label10b = labels[3];

        Assert.That(label00b.Content, Is.EqualTo("0-0b"));
        Assert.That(GetGridProps(label00b), Is.EqualTo((0, 0, 1, 1)));

        Assert.That(label01a.Content, Is.EqualTo("0-1a"));
        Assert.That(GetGridProps(label01a), Is.EqualTo((0, 1, 1, 2)));

        Assert.That(label10a.Content, Is.EqualTo("1-0a"));
        Assert.That(GetGridProps(label10a), Is.EqualTo((1, 0, 2, 1)));

        Assert.That(label10b.Content, Is.EqualTo("1-0b"));
        Assert.That(GetGridProps(label10b), Is.EqualTo((1, 0, 2, 1)));

        insertItems = true;
        StateHasChanged();

        labels = grid.Children.Cast<AC.Label>().ToArray();
        label00a = labels[0];
        label00b = labels[1];
        label01a = labels[2];
        label01b = labels[3];
        label10a = labels[4];
        label10b = labels[5];
        label11a = labels[6];
        label11b = labels[7];

        Assert.That(label00a.Content, Is.EqualTo("0-0a"));
        Assert.That(GetGridProps(label00a), Is.EqualTo((0, 0, 1, 1)));

        Assert.That(label00b.Content, Is.EqualTo("0-0b"));
        Assert.That(GetGridProps(label00b), Is.EqualTo((0, 0, 1, 1)));

        Assert.That(label01a.Content, Is.EqualTo("0-1a"));
        Assert.That(GetGridProps(label01a), Is.EqualTo((0, 1, 1, 2)));

        Assert.That(label01b.Content, Is.EqualTo("0-1b"));
        Assert.That(GetGridProps(label01b), Is.EqualTo((0, 1, 1, 2)));

        Assert.That(label10a.Content, Is.EqualTo("1-0a"));
        Assert.That(GetGridProps(label10a), Is.EqualTo((1, 0, 2, 1)));

        Assert.That(label10b.Content, Is.EqualTo("1-0b"));
        Assert.That(GetGridProps(label10b), Is.EqualTo((1, 0, 2, 1)));

        Assert.That(label11a.Content, Is.EqualTo("1-1a"));
        Assert.That(GetGridProps(label11a), Is.EqualTo((1, 1, 1, 1)));

        Assert.That(label11b.Content, Is.EqualTo("1-1b"));
        Assert.That(GetGridProps(label11b), Is.EqualTo((1, 1, 1, 1)));
    }

    private (int Row, int Column, int RowSpan, int ColumnSpan) GetGridProps(AC.Control target)
    {
        return (AC.Grid.GetRow(target), AC.Grid.GetColumn(target), AC.Grid.GetRowSpan(target), AC.Grid.GetColumnSpan(target));
    }
}
